  version: 2.1

  commands:
    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        # Add parameter here   
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              # Your code here
              exit 1

    revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        # Add parameter here     
      steps:
        - run:
            name: Revert migrations
            # Add when this will run
            command: |
              # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
              SUCCESS = 1
              if(( $SUCCESS==1 )); 
              then
              #  cd ~/project/backend
              #  npm install
              #  Add revert code here. You can find this in the Getting Started section.
                exit 1
              fi
              
  jobs:
    build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build front-end
            command: |
              cd frontend
              npm install
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build

    build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
              npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build

    test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - attach_workspace:
            at: ./
        - run:
            name: Run frontend unit test
            command: |
              cd frontend
              npm install
              npm run test
        # Checkout code from git
        # Restore from cache
        # Your job code here
                  
    test-backend:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here
      steps:
        - checkout
        - attach_workspace:
            at: ./
        - run:
            name: Run backend unit test
            command: |
              cd backend
              npm install
              npm run test
        # Checkout code from git
        # Restore from cache
        # Your job code here
              
    scan-frontend:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here
      steps:
        - checkout
        - run: 
            name: Run the frontend audit
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force              
        # Checkout code from git
        # Restore from cache
        # Your job code here

    scan-backend:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here
      steps:
        - checkout
        - run:
            name: Run the backend scan
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical       
        # Checkout code from git
        # Restore from cache
        # Your job code here

    deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
        # Docker image here that supports AWS CLI
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum -y install tar gzip
        # Checkout code from git
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          ## exit 1
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
              ARN=$(aws s3 ls | grep udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7})
              echo "ARN=$ARN"
              echo "$ARN"
              curl -H "Content-Type: text/plain" -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request PUT --data "$ARN" https://api.memstash.io/values/udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            ## exit 1
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              echo "[backend]" >> inventory.txt
              Backend_ip=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
              echo "$Backend_ip" >> inventory.txt
            # Your code here
            ## exit 1
        - persist_to_workspace:
            root: ./
            paths:
              - .circleci/ansible/inventory.txt
        # Here's where you will add some code to rollback on failure      

    configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["ba:fe:61:06:6d:00:6e:31:44:5d:19:cf:ef:44:3e:cf"]
        # Checkout code from git
        # Add ssh keys with fingerprint
        # attach workspace
        - run:
            name: save ips
            command: | 
                curl -H "Content-Type: text/plain" -H "token: 0cd52177-868d-4982-ac51-f1e6b661064a" --request PUT --data "$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name, Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)" https://api.memstash.io/values/ips        
        - run:
            name: Install dependencies
            command: |
              apk add --update tar gzip ansible nodejs npm curl
              apk add openssh-client
              pip install awscli
            ##exit 1
        - run: 
            name: Configure server
            command: |
              cd .circleci/ansible
              echo "[ssh_connection]" > ansible.cfg
              echo "scp_if_ssh=True" >> ansible.cfg
              echo "timeout=20">> ansible.cfg
              cat ansible.cfg

              echo "[web]" >> inventory.txt
              YUVOPS_URLS=$(curl -H "token: 7c7e45d9-6a83-4d93-b869-7338fcf92714" --request GET https://api.memstash.io/values/udapeople-${CIRCLE_WORKFLOW_ID:0:7}
              echo "$YUVOPS_URLS" >> inventory.txt
              cat inventory.txt

              apk --no-cache add curl && 
              echo [all] > ~/inventory.txt &&
              curl -H "token: 0cd52177-868d-4982-ac51-f1e6b661064a" --request GET https://api.memstash.io/values/ips >> ~/inventory.txt && 
              export ANSIBLE_HOST_KEY_CHECKING=False && ansible-playbook  -i ~/inventory.txt .circleci/ansible/roles/configure-server.yml --extra-vars "TYPEORM_HOST=${TYPEORM_HOST} TYPEORM_PORT=${TYPEORM_PORT} TYPEORM_USERNAME=${TYPEORM_USERNAME} TYPEORM_PASSWORD=${TYPEORM_PASSWORD} TYPEORM_DATABASE=${TYPEORM_DATABASE}"
          ## exit 1
        # Here's where you will add some code to rollback on failure      

    run-migrations:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here that supports NodeJS
      steps:
        # Checkout code from git
        - run:
            name: Run migrations
            command: |
              # Your code here
              exit 1
        - run:
            name: Send migration results to memstash
            command: |
              # Your code here
              exit 1
      # Here's where you will add some code to rollback on failure      

    deploy-frontend:
      docker:
        - image: amazon/aws-cli
        # Docker image here that supports AWS CLI
      steps:
        # Checkout code from git
        - run:
            name: Install dependencies
            command: |
              # your code here
        - run:
            name: Get backend url
            command: |
              # your code here
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
        - run:
            name: Deploy frontend objects
            command: |
              # your code here
        # Here's where you will add some code to rollback on failure      
                      
    deploy-backend:
      docker:
        - image: python:3.7-alpine3.11
        # Docker image here that supports Ansible
      steps:
        - checkout
        # Checkout code from git
        # Add ssh keys with fingerprint
        # attach workspace
        - run:
            name: Install dependencies
            command: |
              # your code here
        - run:
            name: Deploy backend
            command: |
              # your code here
        # Here's where you will add some code to rollback on failure  

    smoke-test:
      docker:
        - image: circleci/node:13.8.0
        # Lightweight Docker image 
      steps:
        # Checkout code from git
        - run:
            name: Install dependencies
            command: |
              # your code here
        - run:
            name: Get backend url
            command: |
              # your code here
        - run:
            name: Backend smoke test.
            command: |
              # your code here
        - run:
            name: Frontend smoke test.
            command: |
              # your code here
        # Here's where you will add some code to rollback on failure  

    cloudfront-update:
      docker:
        - image: amazon/aws-cli
        # Docker image here that supports AWS CLI
      steps:
        - checkout
        # Checkout code from git
        - run:
            name: Install dependencies
            command: |
              # your code here
        - run:
            name: Update cloudfront distribution
            command: |
              # your code here
        # Here's where you will add some code to rollback on failure  

    cleanup:
      docker:
        - image: circleci/node:13.8.0
        # Docker image here
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
              

  workflows:
    default:
      jobs:
        - build-frontend
        - build-backend
        - test-frontend:
            requires: [build-frontend]
        - test-backend:
            requires: [build-backend]
        - scan-backend:
            requires: [build-backend]
        - scan-frontend:
            requires: [build-frontend]
        - deploy-infrastructure:
            requires: [test-frontend, test-backend, scan-frontend, scan-backend]
            filters:
              branches:
                only: [master]
                ##only: [test-feature-branch]
        - configure-infrastructure:
            requires: [deploy-infrastructure]
        - run-migrations:
            requires: [configure-infrastructure]
        - deploy-frontend:
            requires: [run-migrations]
        - deploy-backend:
            requires: [run-migrations]
        - smoke-test:
            requires: [deploy-backend, deploy-frontend]
        - cloudfront-update:
            requires: [smoke-test]
        - cleanup:
            requires: [cloudfront-update]